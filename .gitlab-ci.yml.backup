stages:
  - validate
  - attest
  - policy_check
  - change_request
  - approval
  - deploy

variables:
  OPA_URL: "http://mars.butterflycluster.com:8181/v1/data/pipeline/allow"
  SERVICENOW_URL: "https://$SERVICENOW_INSTANCE.service-now.com/api/now/table/change_request"
  GIT_STRATEGY: clone

mock-validate-jira:
  stage: validate
  script: |
    echo '{ "ticket": "DASH-123", "status": "Open", "type": "Story" }' > validated_issues.json
    echo '{ "input": { "validated_jira": true, "has_high_severity": false, "license_compliant": true } }' > opa_input.json

  artifacts:
    paths:
      - validated_issues.json
      - opa_input.json

attest-validation:
  stage: attest
  image: alpine:3.20
  before_script:
    - apk add --no-cache curl jq
    - COSIGN_VERSION=$(curl -s https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r .tag_name)
    - curl -L -o cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
    - chmod +x cosign
    - mv cosign /usr/local/bin/
  script: |
    echo "üîê Generating ephemeral signing key..."
    cosign generate-key-pair

    echo "‚úçÔ∏è  Signing opa_input.json..."
    cosign sign-blob --key cosign.key --output-signature opa_input.sig --tlog-upload=false opa_input.json
    echo "‚úÖ Signature complete."
  artifacts:
    paths:
      - opa_input.json
      - opa_input.sig
      - cosign.pub

policy-check:
  stage: policy_check
  image: alpine:3.20
  dependencies:
    - attest-validation
  before_script:
    - apk add --no-cache curl jq
    - COSIGN_VERSION=$(curl -s https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r .tag_name)
    - curl -L -o cosign "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64"
    - chmod +x cosign
    - mv cosign /usr/local/bin/
  script: |
    echo "üîç Verifying signature before policy check..."
    ls -lh
    sha256sum opa_input.json opa_input.sig || true

    cosign verify-blob \
      --offline \
      --key cosign.pub \
      --signature opa_input.sig \
      --insecure-ignore-tlog \
      opa_input.json

    echo "‚úÖ Signature verified. Sending raw input to OPA..."
    curl -s -X POST -H "Content-Type: application/json" \
      -d @opa_input.json "$OPA_URL" > opa_result.json

    echo "üìÑ OPA Result:"
    cat opa_result.json

    echo "üß™ Evaluating policy outcome..."
    jq -e '.result == true' opa_result.json || {
      echo "‚ùå Policy denied the input. Failing pipeline."
      exit 1
    }
  artifacts:
    paths:
      - opa_result.json


request-cr:
  stage: change_request
  image: registry.access.redhat.com/ubi8/ubi:latest
  script: |
    echo "üì§ Creating Change Request in ServiceNow..."
    response=$(curl --fail -X POST "$SERVICENOW_URL" \
      -H "Content-Type: application/json" \
      -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
      -d @opa_input.json)

    echo "‚úÖ Response from ServiceNow:"
    echo "$response" > cr_response.json
    cat cr_response.json
  artifacts:
    paths:
      - cr_response.json


wait-for-approval:
  stage: approval
  image: registry.access.redhat.com/ubi8/ubi:latest
  before_script:
    - yum install -y jq curl
  script: |
    echo "‚è≥ Waiting for Change Request approval in ServiceNow..."

    CR_SYS_ID=$(jq -r '.result.sys_id' cr_response.json)
    if [ -z "$CR_SYS_ID" ] || [ "$CR_SYS_ID" == "null" ]; then
      echo "‚ùå Could not extract sys_id from cr_response.json"
      cat cr_response.json
      exit 1
    fi

    echo "üîç Monitoring CR sys_id: $CR_SYS_ID"

    APPROVED_STATES=("-1" "0" "3" "4")  # Implement, Review, Closed, Canceled
    MAX_CHECKS=30
    INTERVAL=10

    for ((i=1; i<=MAX_CHECKS; i++)); do
      NOW=$(date '+%Y-%m-%dT%H:%M:%S')
      RESPONSE=$(curl -s -u "$SERVICENOW_USERNAME:$SERVICENOW_PASSWORD" \
        "$SERVICENOW_URL/$CR_SYS_ID")

      STATE_NUM=$(echo "$RESPONSE" | jq -r '.result.state')
      echo "[$NOW] üîÅ Check #$i: CR state = $STATE_NUM"

      if [[ " ${APPROVED_STATES[@]} " =~ " ${STATE_NUM} " ]]; then
        echo "‚úÖ CR has reached approved or terminal state (code: $STATE_NUM)."
        exit 0
      fi

      sleep "$INTERVAL"
    done

    NOW=$(date '+%Y-%m-%dT%H:%M:%S')
    echo "üî• [$NOW] Timeout reached after $((MAX_CHECKS * INTERVAL)) seconds. Final CR state = $STATE_NUM"
    exit 1
  dependencies:
    - request-cr
  artifacts:
    paths:
      - cr_response.json

deploy:
  stage: deploy
  script: |
    echo '{ "status": "success", "timestamp": "'$(date)'" }' > deployment_metadata.json
  artifacts:
    paths:
      - deployment_metadata.json
